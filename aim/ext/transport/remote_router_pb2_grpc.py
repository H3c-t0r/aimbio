# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
try:
    import grpc
except ImportError:
    grpc = None

import aim.ext.transport.remote_router_pb2 as remote__router__pb2


class RemoteRouterServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.client_heartbeat = channel.unary_unary(
                '/RemoteRouterService/client_heartbeat',
                request_serializer=remote__router__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=remote__router__pb2.HeartbeatResponse.FromString,
                )
        self.get_version = channel.unary_unary(
                '/RemoteRouterService/get_version',
                request_serializer=remote__router__pb2.VersionRequest.SerializeToString,
                response_deserializer=remote__router__pb2.VersionResponse.FromString,
                )
        self.client_connect = channel.unary_unary(
                '/RemoteRouterService/client_connect',
                request_serializer=remote__router__pb2.ClientConnectRequest.SerializeToString,
                response_deserializer=remote__router__pb2.ClientConnectResponse.FromString,
                )
        self.client_re_connect = channel.unary_unary(
                '/RemoteRouterService/client_re_connect',
                request_serializer=remote__router__pb2.ClientReConnectRequest.SerializeToString,
                response_deserializer=remote__router__pb2.ClientReConnectResponse.FromString,
                )
        self.client_disconnect = channel.unary_unary(
                '/RemoteRouterService/client_disconnect',
                request_serializer=remote__router__pb2.ClientDisconnectRequest.SerializeToString,
                response_deserializer=remote__router__pb2.ClientDisconnectResponse.FromString,
                )


class RemoteRouterServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def client_heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_version(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def client_connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def client_re_connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def client_disconnect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RemoteRouterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'client_heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.client_heartbeat,
                    request_deserializer=remote__router__pb2.HeartbeatRequest.FromString,
                    response_serializer=remote__router__pb2.HeartbeatResponse.SerializeToString,
            ),
            'get_version': grpc.unary_unary_rpc_method_handler(
                    servicer.get_version,
                    request_deserializer=remote__router__pb2.VersionRequest.FromString,
                    response_serializer=remote__router__pb2.VersionResponse.SerializeToString,
            ),
            'client_connect': grpc.unary_unary_rpc_method_handler(
                    servicer.client_connect,
                    request_deserializer=remote__router__pb2.ClientConnectRequest.FromString,
                    response_serializer=remote__router__pb2.ClientConnectResponse.SerializeToString,
            ),
            'client_re_connect': grpc.unary_unary_rpc_method_handler(
                    servicer.client_re_connect,
                    request_deserializer=remote__router__pb2.ClientReConnectRequest.FromString,
                    response_serializer=remote__router__pb2.ClientReConnectResponse.SerializeToString,
            ),
            'client_disconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.client_disconnect,
                    request_deserializer=remote__router__pb2.ClientDisconnectRequest.FromString,
                    response_serializer=remote__router__pb2.ClientDisconnectResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RemoteRouterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RemoteRouterService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def client_heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RemoteRouterService/client_heartbeat',
            remote__router__pb2.HeartbeatRequest.SerializeToString,
            remote__router__pb2.HeartbeatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RemoteRouterService/get_version',
            remote__router__pb2.VersionRequest.SerializeToString,
            remote__router__pb2.VersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def client_connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RemoteRouterService/client_connect',
            remote__router__pb2.ClientConnectRequest.SerializeToString,
            remote__router__pb2.ClientConnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def client_re_connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RemoteRouterService/client_re_connect',
            remote__router__pb2.ClientReConnectRequest.SerializeToString,
            remote__router__pb2.ClientReConnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def client_disconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RemoteRouterService/client_disconnect',
            remote__router__pb2.ClientDisconnectRequest.SerializeToString,
            remote__router__pb2.ClientDisconnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
